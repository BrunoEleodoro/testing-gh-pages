{"version":3,"sources":["logo.svg","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getUserInfo","access_token","fetch","method","headers","Authorization","Content-Type","then","results","json","data","setState","user","JSON","parse","state","nome","_this2","window","location","search","length","undefined","split","code","Accept","body","stringify","my_code","pageContent","react_default","a","createElement","Avatar","alt","src","avatar_url","Typography","variant","name","bio","Container","defineProperty","maxWidth","style","backgroundColor","Grid","container","direction","justify","alignItems","Component","App","Home_Home","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+OCKnBC,cACjB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAiCJI,YAAc,SAACC,GACXC,MAAM,gEAAiE,CACnEC,OAAQ,MACRC,QAAS,CACLC,cAAiB,UACjBC,eAAgB,sBAIrBC,KAAK,SAAAC,GACJ,OAAOA,EAAQC,SAEhBF,KAAK,SAACG,GACLjB,EAAKkB,SAAS,CAAEC,KAAMC,KAAKC,MAAMJ,QA7CrCjB,EAAKsB,MAAQ,CACTC,KAAM,GACNJ,KAAM,IAJAnB,mFAQM,IAAAwB,EAAArB,KAChB,GAAIsB,OAAOC,SAASC,OAAOC,OAAS,GAChC,QAA8DC,GAA1DJ,OAAOC,SAASC,OAAOG,MAAM,KAAK,GAAGA,MAAM,SAAS,GAAiB,CACrE,IAAIC,EAAON,OAAOC,SAASC,OAAOG,MAAM,KAAK,GAAGA,MAAM,SAAS,GAC/DrB,MAAM,gEAAiE,CACnEC,OAAQ,OACRC,QAAS,CACLqB,OAAU,mBACVnB,eAAgB,oBAEpBoB,KAAMb,KAAKc,UAAU,CAAEC,QAASJ,MACjCjB,KAAK,SAAAC,GACJ,OAAOA,EAAQC,SAChBF,KAAK,SAACG,GACL,IAAIT,EAAeY,KAAKC,MAAMJ,EAAKgB,MAAMzB,aAEzCgB,EAAKjB,YAAYC,WAKzBiB,OAAOC,SAAW,2GAuBtB,IAAIU,EAAc,GAUlB,OATIjC,KAAKmB,MAAMH,MAAQ,KACnBiB,EAAeC,EAAAC,EAAAC,cAAA,WACXF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,IAAI,MAAMC,IAAKvC,KAAKmB,MAAMH,KAAKwB,aACvCN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,SAAU1C,KAAKmB,MAAMH,KAAK2B,KAA9C,KACAT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,SAAU1C,KAAKmB,MAAMH,KAAK4B,IAA9C,OAIJV,EAAAC,EAAAC,cAACS,EAAA,EAAD/C,OAAAgD,EAAA,EAAAhD,CAAA,CAAWiD,SAAS,KAAKC,MAAO,CAAEC,gBAAiB,QAAnD,WAAsE,MAClEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UAEVrB,WAvEasB,aCsBnBC,MANf,WACE,OACEtB,EAAAC,EAAAC,cAACqB,EAAD,OCXgBC,QACW,cAA7BpC,OAAOC,SAASoC,UAEe,UAA7BrC,OAAOC,SAASoC,UAEhBrC,OAAOC,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.7271f212.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport { Container, Grid, Typography } from \"@material-ui/core\";\nimport { access } from \"fs\";\nimport Avatar from '@material-ui/core/Avatar';\n\nexport default class Home extends Component {\n    constructor() {\n        super();\n        this.state = {\n            nome: \"\",\n            user: {}\n        }\n    }\n\n    componentDidMount() {\n        if (window.location.search.length > 0) {\n            if (window.location.search.split(\"?\")[1].split(\"code=\")[1] != undefined) {\n                var code = window.location.search.split(\"?\")[1].split(\"code=\")[1]\n                fetch(\"https://brunoeleodoro.api.stdlib.com/MyFirstServelessApp@dev/\", {\n                    method: 'POST',\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ my_code: code })\n                }).then(results => {\n                    return results.json();\n                }).then((data) => {\n                    var access_token = JSON.parse(data.body).access_token\n\n                    this.getUserInfo(access_token);\n                });\n            }\n        }\n        else {\n            window.location = \"https://github.com/login/oauth/authorize?client_id=Iv1.bc3e680d4058764d\"\n        }\n\n    }\n\n    getUserInfo = (access_token) => {\n        fetch(\"https://brunoeleodoro.api.stdlib.com/MyFirstServelessApp@dev/\", {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ',\n                'Content-Type': 'application/json'\n            },\n            // mode: 'no-cors'\n            // dataType:\"jsonp\"\n        }).then(results => {\n            return results.json();\n            // return results\n        }).then((data) => {\n            this.setState({ user: JSON.parse(data) })\n        });\n    }\n\n    render() {\n        var pageContent = \"\"\n        if (this.state.user != {}) {\n            pageContent = (<div>\n                <Avatar alt=\"Img\" src={this.state.user.avatar_url}/>\n                <br/>\n                <Typography variant=\"body1\" >{this.state.user.name} </Typography>\n                <br/>\n                <Typography variant=\"body1\" >{this.state.user.bio} </Typography>\n            </div>)\n        }\n        return (\n            <Container maxWidth=\"lg\" style={{ backgroundColor: \"red\" }} maxWidth={\"lg\"} >\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                >\n                    {pageContent}\n\n                </Grid>\n            </Container>\n        );\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from \"./pages/Home\"\n\nfunction getPersonName() {\n  var token = document.getElementById(\"token\").value;\n  // alert(token)\n  fetch(\"https://api.github.com/repos/BrunoEleodoro/querido_textos_flutter/issues\", {\n    method: 'get',\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }).then(results => {\n    return results.json();\n  }).then((data) => {\n    alert(data)\n  });\n}\n\nfunction App() {\n  return (\n    <Home></Home>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}